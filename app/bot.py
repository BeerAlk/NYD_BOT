import logging
import asyncio
from typing import Any

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ChatJoinRequest
from aiogram.fsm.storage.memory import MemoryStorage

from app.config import API_TOKEN, MAIN_CHANNEL_ID, MAIN_CHANNEL_USERNAME, CLOSED_GROUP_CHAT, CLOSED_CHANNEL_LINK, ADMIN_ID, ADMIN_USERNAME
from app.db import add_subscriber, get_all_subscribers, remove_subscriber

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ –ø–∞–º—è—Ç–∏ –¥–ª—è FSM
bot: Bot = Bot(token=API_TOKEN)
storage: MemoryStorage = MemoryStorage()
dp: Dispatcher = Dispatcher(bot=bot, storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö media_group_id
processed_media_groups: dict[str, bool] = {}

async def delete_webhook():
    result = await bot.delete_webhook(drop_pending_updates=True)
    print("Webhook —É–¥–∞–ª—ë–Ω:", result)
    return result

async def check_subscription(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: True, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω, –∏–Ω–∞—á–µ False.
    """
    try:
        member = await bot.get_chat_member(MAIN_CHANNEL_ID, user_id)
        if member.status not in ["member", "administrator", "creator"]:
            return False
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False

def is_admin(message: types.Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: True, –µ—Å–ª–∏ –∞–¥–º–∏–Ω.
    """
    return message.from_user.id == ADMIN_ID

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
@dp.chat_join_request(F.chat.id == CLOSED_GROUP_CHAT)
async def handle_join_request(request: ChatJoinRequest) -> None:
    user_id: int = request.from_user.id
    username: str = request.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    if await check_subscription(user_id):
        await bot.approve_chat_join_request(CLOSED_GROUP_CHAT, user_id)
        logging.info("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞: %s (%d)", username, user_id)
        await add_subscriber(user_id)
    else:
        await bot.decline_chat_join_request(CLOSED_GROUP_CHAT, user_id)
        logging.info("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: %s (%d)", username, user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message) -> None:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")],
        [InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", url=f"https://t.me/{ADMIN_USERNAME}")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ Not Yet Design!\n\n"
        f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: https://t.me/{MAIN_CHANNEL_USERNAME},\n"
        f"–∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\".",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription_callback(callback_query: types.CallbackQuery) -> None:
    user_id: int = callback_query.from_user.id
    logging.info("–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", user_id)
    if await check_subscription(user_id):
        await add_subscriber(user_id)
        await callback_query.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!")
        await callback_query.message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–∞–Ω–∞–ª—É: " + CLOSED_CHANNEL_LINK
        )
    else:
        await callback_query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /post –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤
@dp.message(Command("post"))
async def post_command(message: types.Message) -> None:
    if not is_admin(message):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        sent_message = None
        if message.photo:
            sent_message = await bot.send_photo(
                MAIN_CHANNEL_ID,
                message.photo[-1].file_id,
                caption=message.caption
            )
        elif message.video:
            sent_message = await bot.send_video(
                MAIN_CHANNEL_ID,
                message.video.file_id,
                caption=message.caption
            )
        else:
            args = message.text.split(maxsplit=1)
            if len(args) < 2:
                await message.reply("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ.")
                return
            text = args[1]
            sent_message = await bot.send_message(MAIN_CHANNEL_ID, text)
        if sent_message:
            post_url = f"https://t.me/{MAIN_CHANNEL_USERNAME}/{sent_message.message_id}"
            subscribers = await get_all_subscribers()
            for user_id in subscribers:
                try:
                    await bot.send_message(user_id, f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ: {post_url}")
                except Exception as e:
                    logging.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", user_id, e)
                    await remove_subscriber(user_id)
            await message.reply("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º!")
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: %s", e)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
@dp.channel_post()
async def channel_post_handler(message: types.Message) -> None:
    if message.media_group_id:
        if processed_media_groups.get(message.media_group_id):
            logging.info("Media group %s —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ %d", message.media_group_id, message.message_id)
            return
        processed_media_groups[message.media_group_id] = True

    try:
        post_url = f"https://t.me/{MAIN_CHANNEL_USERNAME}/{message.message_id}"
        logging.info("–ù–æ–≤—ã–π –ø–æ—Å—Ç: %s", post_url)
        subscribers = await get_all_subscribers()
        for user_id in subscribers:
            try:
                await bot.send_message(user_id, f"–ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ: {post_url}")
            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %s", user_id, e)
                await remove_subscriber(user_id)
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞: %s", e)

# –ö–æ–º–∞–Ω–¥–∞ /check_users ‚Äì —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
@dp.message(Command("check_users"))
async def check_users_command(message: types.Message) -> None:
    if not is_admin(message):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    subscribers = await get_all_subscribers()
    removed_users = []
    if not subscribers:
        await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç. –ù–∏–∫–æ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å.")
        return
    for user_id in subscribers:
        is_subscribed = await check_subscription(user_id)
        try:
            await bot.send_chat_action(user_id, "typing")
            is_active = True
        except Exception as e:
            is_active = False
            logging.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω: %s", user_id, e)
        if not is_subscribed or not is_active:
            await remove_subscriber(user_id)
            removed_users.append(user_id)
            try:
                await bot.ban_chat_member(CLOSED_GROUP_CHAT, user_id)
                await bot.unban_chat_member(CLOSED_GROUP_CHAT, user_id)
                logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã.", user_id)
            except Exception as e:
                logging.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –∏–∑ –≥—Ä—É–ø–ø—ã: %s", user_id, e)
    await message.reply(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(removed_users)}")

# –ö–æ–º–∞–Ω–¥–∞ /list_users ‚Äì –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
@dp.message(Command("list_users"))
async def list_users_command(message: types.Message) -> None:
    if not is_admin(message):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    subscribers = await get_all_subscribers()
    if subscribers:
        await message.reply("–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:\n" + "\n".join(str(uid) for uid in subscribers))
    else:
        await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –ø—É—Å—Ç.")
